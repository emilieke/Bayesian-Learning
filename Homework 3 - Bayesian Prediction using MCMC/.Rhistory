sd(k_post)
mean(theta_post)
sd(theta_post)
M=10000
disc_pred=rweibull(M,shape=k_post,scale=1)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
# And we can approximate the predictive probability of a discharge larger than 1m3/sec·km2
disc_pred=rgamma(M,shape=k_post,scale=1)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
# And we can approximate the predictive probability of a discharge larger than 1m3/sec·km2
# using simply the mean of sampled values larger than 1:
mean(disc_pred>1)
disc_pred=rgamma(M,shape=k_post,rate=theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
mean(disc_pred>1)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
min(Discharge)
max(Discharge)
?rweibull
disc_pred=rweibull(M,shape=k_post,scale=1/theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
disc_pred=rweibull(M,shape=k_post,scale=1/theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
?rweibull
?rgamma
for (t in 2:T)
{
theta[t]=rgamma(1,shape=a+n,rate=b+sum(y^k[t-1]))
k_c=rnorm(1,k[t-1],sd=1)
if(k_c<k_min || k_c>k_max){k[t]=k[t-1]}
else{
logal=n*log(k_c) + (k_c-1)*sum(log(y))-theta[t]*sum(y^k_c)
logal=logal-(n*log(k[t-1]) + (k[t-1]-1)*sum(log(y))-theta[t]*sum(y^k[t-1]))
u=runif(1)
if (log(u)<logal)
{
k[t]=k_c
if (t>burnin){pac=pac+1}
}
else k[t]=k[t-1]
}
}
# We can calculate the proportion of accepted values:
pac=pac/iters;pac
# We can plot the traces of the Markov chain:
ts.plot(k)
ts.plot(theta)
# And obtain posterior samples in equilibrium:
k_post=k[burnin+1:iters]
theta_post=theta[burnin+1:iters]
# We can approximate the posterior distribution of the model parameters:
hist(k_post,col='light blue')
hist(theta_post,col='deepskyblue4')
# And obtain 95% credible intervals for k and theta
quantile(k_post,c(0.025,0.975))
quantile(theta_post,c(0.025,0.975))
# We can also approximate the posterior mean and standard deviations of k and theta
mean(k_post)
sd(k_post)
mean(theta_post)
sd(theta_post)
# Obtain an approximate sample from the predictive distribution of the discharge
# and estimate the probability of a discharge larger than 1m3/sec · km2.
# However, we may use the posterior MCMC sample to approximate predictive
# probabilities.  A sample of size (M = 10 000) from the predictive distribution can
# be obtained with:
M=10000
disc_pred=rweibull(M,shape=k_post,scale=1/theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
# And we can approximate the predictive probability of a discharge larger than 1m3/sec·km2
# using simply the mean of sampled values larger than 1:
mean(disc_pred>1)
data <- read.csv2("January09.csv")
attach(data)
names(data)
hist(Discharge)
mean(Discharge)
sd(Discharge)
min(Discharge)
max(Discharge)
nu.min=0;  nu.max=100;  a=0.01;  b=0.01;
y=Discharge
n=length(y)
burnin=1000; iters=10000
T=burnin+iters
nu=rep(0,T); lam=rep(0,T)
nu[1]=10; lam[1]=5;
pac=0;
for (t in 2:T)
{
lam[t]=rgamma(1,shape=a+n*nu[t-1],rate=b+sum(y))
nuc=rnorm(1,nu[t-1],sd=1)
if(nuc<nu.min || nuc>nu.max){nu[t]=nu[t-1]}
else
{
logal=(nuc-1)*sum(log(y))-n*lgamma(nuc)+n*nuc*log(lam[t])
logal=logal-(nu[t-1]-1)*sum(log(y))+n*lgamma(nu[t-1])
logal=logal-n*nu[t-1]*log(lam[t])
u=runif(1)
if (log(u)<logal)
{
nu[t]=nuc
if (t>burnin){pac=pac+1}
}
else nu[t]=nu[t-1]
}
}
pac=pac/iters
pac=pac/iters;pac
ts.plot(nu)
nu[1]=3; lam[1]=1;
pac=0;
for (t in 2:T)
{
lam[t]=rgamma(1,shape=a+n*nu[t-1],rate=b+sum(y))
nuc=rnorm(1,nu[t-1],sd=1)
if(nuc<nu.min || nuc>nu.max){nu[t]=nu[t-1]}
else
{
logal=(nuc-1)*sum(log(y))-n*lgamma(nuc)+n*nuc*log(lam[t])
logal=logal-(nu[t-1]-1)*sum(log(y))+n*lgamma(nu[t-1])
logal=logal-n*nu[t-1]*log(lam[t])
u=runif(1)
if (log(u)<logal)
{
nu[t]=nuc
if (t>burnin){pac=pac+1}
}
else nu[t]=nu[t-1]
}
}
pac=pac/iters;pac
ts.plot(nu)
nu[1]=4; lam[1]=1;
pac=0;
for (t in 2:T)
{
lam[t]=rgamma(1,shape=a+n*nu[t-1],rate=b+sum(y))
nuc=rnorm(1,nu[t-1],sd=1)
if(nuc<nu.min || nuc>nu.max){nu[t]=nu[t-1]}
else
{
logal=(nuc-1)*sum(log(y))-n*lgamma(nuc)+n*nuc*log(lam[t])
logal=logal-(nu[t-1]-1)*sum(log(y))+n*lgamma(nu[t-1])
logal=logal-n*nu[t-1]*log(lam[t])
u=runif(1)
if (log(u)<logal)
{
nu[t]=nuc
if (t>burnin){pac=pac+1}
}
else nu[t]=nu[t-1]
}
}
pac=pac/iters;pac
ts.plot(nu)
ts.plot(lam)
nu[1]=4; lam[1]=17;
pac=0;
for (t in 2:T)
{
lam[t]=rgamma(1,shape=a+n*nu[t-1],rate=b+sum(y))
nuc=rnorm(1,nu[t-1],sd=1)
if(nuc<nu.min || nuc>nu.max){nu[t]=nu[t-1]}
else
{
logal=(nuc-1)*sum(log(y))-n*lgamma(nuc)+n*nuc*log(lam[t])
logal=logal-(nu[t-1]-1)*sum(log(y))+n*lgamma(nu[t-1])
logal=logal-n*nu[t-1]*log(lam[t])
u=runif(1)
if (log(u)<logal)
{
nu[t]=nuc
if (t>burnin){pac=pac+1}
}
else nu[t]=nu[t-1]
}
}
pac=pac/iters;pac
ts.plot(nu)
ts.plot(lam)
nu.post=nu[burnin+1:iters]
lam.post=lam[burnin+1:iters]
hist(nu.post)
hist(lam.post)
quantile(nu.post,c(0.025,0.975))
quantile(lam.post,c(0.025,0.975))
mean(nu.post)
sd(nu.post)
mean(lam.post)
sd(lam.post)
M=10000
disc.pred=rgamma(M,shape=nu.post,rate=lam.post)
hist(disc.pred)
hist(y,freq=F)
lines(density(disc.pred))
mean(disc.pred>1)
data <- read.csv2("January09.csv")
# Attach data to R search path
attach(data)
# Names of data
names(data)
# Look at the main characteristics of the data
hist(Discharge, col='light blue', breaks=30)
mean(Discharge)
sd(Discharge)
min(Discharge)
max(Discharge)
summary(Discharge)
# Assume that the discharge, Y , follows a Weibull distribution, Y |κ, θ ∼ W (κ, θ)
# whose density function is given by: f(y |κ,θ)=κθyκ−1exp(−θyκ), y >0.
# Assume e.g. the following prior distribution: κ ∼ Uniform (κmin , κmax ) θ ∼ Gamma (a, b)
# Set the prior parameters by assuming non informative priors
k_min=0
k_max=100
a=0.01
b=0.01
# Define the data set
y=Discharge
n=length(y)
# Set the number of burnin iterations and iterations in equilibrium:
burnin=1000
iters=10000
T=burnin+iters
# Initialize a vector for the values of κ and θ in the Markov chain:
k=rep(0,T)
theta=rep(0,T)
# Set initial values for the model parameters
k[1]=10
theta[1]=5
# Initialize proportion of accepted values in the MH algorithm:
pac=0
# We are ready to simulate the Markov chain
for (t in 2:T)
{
theta[t]=rgamma(1,shape=a+n,rate=b+sum(y^k[t-1]))
k_c=rnorm(1,k[t-1],sd=1)
if(k_c<k_min || k_c>k_max){k[t]=k[t-1]}
else{
logal=n*log(k_c) + (k_c-1)*sum(log(y))-theta[t]*sum(y^k_c)
logal=logal-(n*log(k[t-1]) + (k[t-1]-1)*sum(log(y))-theta[t]*sum(y^k[t-1]))
u=runif(1)
if (log(u)<logal)
{
k[t]=k_c
if (t>burnin){pac=pac+1}
}
else k[t]=k[t-1]
}
}
# We can calculate the proportion of accepted values:
pac=pac/iters;pac
# We can plot the traces of the Markov chain:
ts.plot(k)
ts.plot(theta)
k[1]=2
theta[1]=0.1
# Initialize proportion of accepted values in the MH algorithm:
pac=0
# We are ready to simulate the Markov chain
?rweibull
?rgamma
# Construct an MCMC algorithm to sample from the posterior of (κ, θ | y)
# and obtain estimations for the posterior means and 95% credible intervals for κ and θ.
# MCMC chain
for (t in 2:T)
{
theta[t]=rgamma(1,shape=a+n,rate=b+sum(y^k[t-1]))
k_c=rnorm(1,k[t-1],sd=1)
if(k_c<k_min || k_c>k_max){k[t]=k[t-1]}
else{
logal=n*log(k_c) + (k_c-1)*sum(log(y))-theta[t]*sum(y^k_c)
logal=logal-(n*log(k[t-1]) + (k[t-1]-1)*sum(log(y))-theta[t]*sum(y^k[t-1]))
u=runif(1)
if (log(u)<logal)
{
k[t]=k_c
if (t>burnin){pac=pac+1}
}
else k[t]=k[t-1]
}
}
# We can calculate the proportion of accepted values:
pac=pac/iters;pac
# We can plot the traces of the Markov chain:
ts.plot(k)
ts.plot(theta)
ts.plot(k)
ts.plot(theta)
theta[1]=15
# Initialize proportion of accepted values in the MH algorithm:
pac=0
# We are ready to simulate the Markov chain
?rweibull
?rgamma
# Construct an MCMC algorithm to sample from the posterior of (κ, θ | y)
# and obtain estimations for the posterior means and 95% credible intervals for κ and θ.
# MCMC chain
for (t in 2:T)
{
theta[t]=rgamma(1,shape=a+n,rate=b+sum(y^k[t-1]))
k_c=rnorm(1,k[t-1],sd=1)
if(k_c<k_min || k_c>k_max){k[t]=k[t-1]}
else{
logal=n*log(k_c) + (k_c-1)*sum(log(y))-theta[t]*sum(y^k_c)
logal=logal-(n*log(k[t-1]) + (k[t-1]-1)*sum(log(y))-theta[t]*sum(y^k[t-1]))
u=runif(1)
if (log(u)<logal)
{
k[t]=k_c
if (t>burnin){pac=pac+1}
}
else k[t]=k[t-1]
}
}
# We can calculate the proportion of accepted values:
pac=pac/iters;pac
# We can plot the traces of the Markov chain:
ts.plot(k)
ts.plot(theta)
# And obtain posterior samples in equilibrium:
k_post=k[burnin+1:iters]
theta_post=theta[burnin+1:iters]
# We can approximate the posterior distribution of the model parameters:
hist(k_post,col='light blue')
hist(theta_post,col='deepskyblue4')
# And obtain 95% credible intervals for k and theta
quantile(k_post,c(0.025,0.975))
quantile(theta_post,c(0.025,0.975))
# We can also approximate the posterior mean and standard deviations of k and theta
mean(k_post)
sd(k_post)
mean(theta_post)
sd(theta_post)
# Obtain an approximate sample from the predictive distribution of the discharge
# and estimate the probability of a discharge larger than 1m3/sec · km2.
# However, we may use the posterior MCMC sample to approximate predictive
# probabilities.  A sample of size (M = 10 000) from the predictive distribution can
# be obtained with:
M=10000
disc_pred=rweibull(M,shape=k_post,scale=1/theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
disc_pred=rweibull(M,shape=k_post,scale=1/theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
hist(y,freq=F,ylim=c(0,20))
lines(density(disc_pred))
disc_pred=rweibull(M,shape=k_post,scale=1/theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F,ylim=c(0,20))
lines(density(disc_pred))
ts.plot(k)
ts.plot(k,ylab=expression(kappa))
ts.plot(k,ylab=expression(kappa),main='Traces of Markov chain for the shape parameter')
ts.plot(theta,ylab=expression(theta),main='Traces of Markov chain for the scale parameter')
ts.plot(k,ylab=expression(kappa),col='light blue',main='Traces of Markov chain for the shape parameter')
ts.plot(k,ylab=expression(kappa),col='deepskyblue4',main='Traces of Markov chain for the shape parameter')
ts.plot(theta,ylab=expression(theta),col='light blue',main='Traces of Markov chain for the scale parameter')
k_post=k[burnin+1:iters]
theta_post=theta[burnin+1:iters]
k_post=k[burnin+1:iters];k_post
theta_post=theta[burnin+1:iters];theta_post
hist(k_post,col='deepskyblue4')
hist(k_post,col='deepskyblue4', main='Distribution of the shape parameter',xlab='Posterior shape parameter')
hist(theta_post,col='light blue', main='Distribution of the posterior scale parameter',xlab='Posterior scale parameter')
quantile(k_post,c(0.025,0.975))
quantile(theta_post,c(0.025,0.975))
# We can also approximate the posterior mean and standard deviations of k and theta
mean(k_post)
sd(k_post)
mean(theta_post)
sd(theta_post)
M=10000
disc_pred=rweibull(M,shape=k_post,scale=theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F,ylim=c(0,20))
lines(density(disc_pred))
disc_pred=rweibull(M,shape=k_post,scale=theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
disc_pred=rweibull(M,shape=k_post,scale=1/theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
disc_pred=rweibull(M,shape=k_post,scale=theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
# And we can approximate the predictive probability of a discharge larger than 1m3/sec·km2
# using simply the mean of sampled values larger than 1:
mean(disc_pred>1)
hist(y,freq=F, xlim=c(0,2))
lines(density(disc_pred))
# And we can approximate the predictive probability of a discharge larger than 1m3/sec·km2
# using simply the mean of sampled values larger than 1:
mean(disc_pred>1)
?rweibull
hist(y,freq=F)
lines(disc_pred)
lines(density(disc_pred))
disc_pred=rweibull(M,shape=k_post,scale=1/theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
?rweibull
disc.pred=rgamma(M,shape=nu.post,rate=lam.post)
hist(disc.pred)
hist(y,freq=F)
lines(density(disc.pred))
disc_pred_2=dweibull(disc_pred,shape=k_post,scale=1/theta_post)
hist(disc_pred_2)
hist(y,freq=F)
lines(disc_pred_2)
disc.pred=rgamma(M,shape=k_post,rate=theta_post)
disc_pred=rgamma(M,shape=k_post,rate=theta_post)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
mean(disc_pred>1)
disc_pred=rgamma(M,shape=k_post,rate=theta_post)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
hist(y,freq=F,ylim=c(0,10))
lines(density(disc_pred))
hist(y,freq=F,ylim=c(0,6))
lines(density(disc_pred))
disc_pred=rweibull(M,shape=k_post,scale=1/theta_post)
hist(y,freq=F,ylim=c(0,6))
lines(density(disc_pred))
disc_pred=rgamma(M,shape=k_post,rate=theta_post)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F,ylim=c(0,6))
lines(density(disc_pred))
hist(disc_pred)
lines(density(disc_pred))
hist(disc_pred,freq=F)
lines(density(disc_pred))
hist(disc_pred,freq=T)
hist(disc_pred,freq=F)
hist(disc_pred,freq=F, xlab=expression(\hat{y}))
hist(disc_pred,freq=F, xlab=expression(\hat(y))
hist(disc_pred,freq=F, xlab=expression(\hat y)
hist(disc_pred,freq=F, xlab=expression(\hat(y)))
hist(disc_pred,freq=F, xlab='^y')
hist(disc_pred,freq=F, xlab='\^y')
hist(disc_pred,freq=F, xlab='Predicted y')
hist(disc_pred,freq=F, xlab='Predicted y',col'light blue')
hist(disc_pred,freq=F, xlab='Predicted y',col='light blue')
hist(y,freq=F,ylim=c(0,6),col='deepskyblue4')
hist(y,freq=F,ylim=c(0,6),col='deepskyblue4',breaks=30)
hist(y,freq=F,ylim=c(0,6),col='deepskyblue4',breaks=20)
hist(y,freq=F,ylim=c(0,6),col='deepskyblue4',breaks=25)
hist(y,freq=F,ylim=c(0,6),col='deepskyblue4',breaks=22)
lines(density(disc_pred))
hist(y,freq=F,main='Observed data and predictive density',ylim=c(0,6),col='deepskyblue4',breaks=22)
lines(density(disc_pred))
hist(disc_pred,freq=F, xlab='Predicted y',col='light blue')
hist(disc_pred,freq=F, main='Distribution of predicted data',xlab='Predicted y',col='light blue')
split.screen(2)
split.screen(2,1)
split.screen(1,2)
split.screen(2,2)
split.screen(2,1)
split.screen(2)
split.screen(2)
par(mfrow=c(1,2))
# We can plot the traces of the Markov chain:
ts.plot(k,ylab=expression(kappa),col='deepskyblue4',main='Traces of Markov chain for the shape parameter')
ts.plot(theta,ylab=expression(theta),col='light blue',main='Traces of Markov chain for the scale parameter')
hist(k_post,col='deepskyblue4', main='Distribution of the posterior shape parameter',xlab='Posterior shape parameter')
hist(theta_post,col='light blue', main='Distribution of the posterior scale parameter',xlab='Posterior scale parameter')
ts.plot(k,ylab=expression(kappa),col='deepskyblue4',main='Traces of Markov chain for the shape parameter')
ts.plot(theta,ylab=expression(theta),col='light blue',main='Traces of Markov chain for the scale parameter')
quantile(k_post,c(0.025,0.975))
quantile(theta_post,c(0.025,0.975))
mean(k_post)
sd(k_post)
mean(theta_post)
sd(theta_post)
